name: "Functions"

pool:
  name: Default

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - functions

variables:
- group: Platform-POC
- group: Runtime-POC

stages:

- stage: 'PrepareApiPolicies'
  displayName: 'Preparing Api Policies'
  jobs:
  - job: 'UploadPoliciesToStorage'
    steps:
    - task: Bash@3
      name: 'UploadPolicies'
      displayName: 'Create storage for policy deployment'
      inputs:
        targetType: 'filePath'
        filePath: './functions/ApiArm/Create-PreRequisites-Policies.sh'
        

- stage: 'BuildFunctions'
  displayName: 'Build and publish functions'
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: 'PublishFunctions'
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: './functions/ApiPoc/ApiPoc.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - release'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration release'
        projects: './functions/ApiPoc/ApiPoc.csproj'
      
    - task: DotNetCoreCLI@2
      displayName: Publish dotnet 5 functions ApiProj.csproj
      inputs:
        command: 'publish'
        arguments: '--no-build --no-restore --configuration release --output $(Build.ArtifactStagingDirectory)/release'
        projects: './functions/ApiPoc/ApiPoc.csproj'
        zipAfterPublish: true
        publishWebProjects: false

    - publish: ./functions/ApiArm/
      artifact: Arm

    - publish: $(Build.ArtifactStagingDirectory)/release/ApiPoc.zip
      artifact: Functions

  - job: 'PublishSampleApp'
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'Restore Sample App project dependencies'
      inputs:
        command: 'restore'
        projects: './functions/TestOidcWebApp/TestOidcWebApp.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the Sample App project - release'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration release'
        projects: './functions/TestOidcWebApp/TestOidcWebApp.csproj'
      
    - task: DotNetCoreCLI@2
      displayName: Publish sample app TestOidcWebApp.csproj
      inputs:
        command: 'publish'
        arguments: '--no-build --no-restore --configuration release --output $(Build.ArtifactStagingDirectory)/release'
        projects: './functions/TestOidcWebApp/TestOidcWebApp.csproj'
        zipAfterPublish: true
        publishWebProjects: false

    - publish: $(Build.ArtifactStagingDirectory)/release/TestOidcWebApp.zip
      artifact: TestOidcWebApp

- stage: 'DeployFunctionsToAppServicePlan'
  dependsOn: 
    - BuildFunctions
    - PrepareApiPolicies

  displayName: "Deploy APIs"
  jobs:
  - deployment: "DeployFunctions"
    environment: 'PoC'
    displayName: "Deploy Functions to app service plan"
    variables:
      armSas: $[ stageDependencies.PrepareApiPolicies.UploadPoliciesToStorage.outputs['UploadPolicies.SasToken'] ]
      armBaseUri: $[ stageDependencies.PrepareApiPolicies.UploadPoliciesToStorage.outputs['UploadPolicies.ContainerUri'] ]
    strategy:
      runOnce:
        deploy:
          steps:
            - bash: |
                echo armBaseUri is $(armBaseUri)
                echo armSas is $(armSas)
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: PoCServiceConnection
                appType: functionapp
                appName: $(FunctionApp)
                package: $(Pipeline.Workspace)/Functions/ApiPoc.zip
            - task: AzureWebApp@1
              inputs:
                azureSubscription: PoCServiceConnection
                appName: $(SampleWebApp)
                package: $(Pipeline.Workspace)/TestOidcWebApp/TestOidcWebApp.zip
            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Configure API Management Resource'
              inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: 'PoCServiceConnection'
                  subscriptionId: '$(Subscription)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(ResourceGroup)'
                  location: '$(Location)'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(Pipeline.Workspace)/Arm/employee-api.json'
                  overrideParameters: '-apiManagementServiceName $(ApiManagementName) -functionApp "$(FunctionApp)" -identityServerAppName "$(IdentityServerApp)" -storageBaseUri "$(armBaseUri)/" -templateSasKey "$(armSas)" -keyvault "$(KeyvaultName)"'
                  deploymentMode: 'Incremental'
            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Configure API Management OnPremises Api Resource'
              inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: 'PoCServiceConnection'
                  subscriptionId: '$(Subscription)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(ResourceGroup)'
                  location: '$(Location)'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(Pipeline.Workspace)/Arm/onpremises-api.json'
                  overrideParameters: '-apiManagementServiceName $(ApiManagementName) -storageBaseUri "$(armBaseUri)/" -templateSasKey "$(armSas)"'
                  deploymentMode: 'Incremental'
            - bash: 'az apim api import --path employee --resource-group $(ResourceGroup) --service-name $(ApiManagementName) --api-id employeeApi --api-type http --specification-format OpenApi --specification-path "$(Pipeline.Workspace)/Arm/open-api-definitions/employee-api.json"'
              displayName: 'Import functions swagger into Api Management'
              



